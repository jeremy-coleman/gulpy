import { Undertaker, TaskFunction } from "undertaker"
import * as vfs from "vinyl-fs"
import watch from "glob-watcher"
import { isString, isFunction } from "lodash"

import type * as chokidar from "chokidar"
import type { FSWatcher } from "fs"

// Type definitions for Gulp 4.0
// Project: http://gulpjs.com
// Definitions by: Drew Noakes <https://drewnoakes.com>
//                 Juan Arroyave <http://jarroyave.co>
//                 Giedrius Grabauskas <https://github.com/GiedriusGrabauskas>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
class Gulp extends Undertaker {
  /**
   * Emits files matching provided glob or array of globs. Returns a stream of Vinyl files that can be piped to plugins.
   * @param globs Glob or array of globs to read.
   * @param options Options to pass to node-glob through glob-stream.
   */
  declare src: typeof vfs.src

  /**
   * Can be piped to and it will write files. Re-emits all data passed to it so you can pipe to multiple folders.
   * Folders that don't exist will be created.
   * @param path The path (output folder) to write files to. Or a function that returns it, the function will be provided a vinyl File instance.
   */
  declare dest: typeof vfs.dest

  /**
   * Functions exactly like gulp.dest, but will create symlinks instead of copying a directory.
   * @param folder A folder path or a function that receives in a file and returns a folder path.
   */
  declare symlink: typeof vfs.symlink

  // Let people use this class from our instance
  Gulp = Gulp

  constructor() {
    super()

    // Bind the functions for destructuring
    this.watch = this.watch.bind(this)
    this.task = this.task.bind(this)
    this.series = this.series.bind(this)
    this.parallel = this.parallel.bind(this)
    this.registry = this.registry.bind(this)
    this.tree = this.tree.bind(this)
    this.lastRun = this.lastRun.bind(this)
    this.src = vfs.src.bind(this)
    this.dest = vfs.dest.bind(this)
    this.symlink = vfs.symlink.bind(this)
  }

  /**
   * Takes a path string, an array of path strings, a glob string or an array of glob strings as globs to watch on the filesystem.
   * Also optionally takes options to configure the watcher and a fn to execute when a file changes.
   * @globs A path string, an array of path strings, a glob string or an array of glob strings that indicate which files to watch for changes.
   * @opts Options that are passed to chokidar.
   * @fn Once async completion is signalled, if another run is queued, it will be executed.
   */
  watch(globs: Globs, fn?: TaskFunction): FSWatcher
  watch(globs: Globs, opts?: WatchOptions, fn?: TaskFunction): FSWatcher

  watch(glob: Globs, opt?: TaskFunction | WatchOptions, task?: TaskFunction) {
    if (isString(opt) || isString(task) || Array.isArray(opt) || Array.isArray(task)) {
      throw Error(
        `watching ${glob}: watch task has to be a function (optionally generated by using gulp.parallel or gulp.series)`
      )
    }

    if (isFunction(opt)) {
      task = opt
      opt = undefined
    }

    const fn = isFunction(task) ? this.parallel(task) : undefined
    return watch(glob, opt || {}, fn)
  }
}

export type Globs = string | string[]

export interface WatchOptions extends chokidar.WatchOptions {
  /**
   * The delay to wait before triggering the fn.
   * Useful for waiting on many changes before doing the work on changed files, e.g. find-and-replace on many files.
   * @default 200
   */
  delay?: number
  /**
   * Whether or not a file change should queue the fn execution if the fn is already running. Useful for a long running fn.
   * @default true
   */
  queue?: boolean
}

const inst = new Gulp()
export default inst
