import * as fs from "fs-extra"
import * as path from "path"

import { expect } from "chai"

import gulp from "../index"

type invalid = any

const outPath = path.join(__dirname, "./out-fixtures")

const tempFileContent = "A test generated this file and it is safe to delete"

function createTempFile(path: string) {
  fs.writeFileSync(path, tempFileContent)
}

function updateTempFile(path: string) {
  setTimeout(() => {
    fs.appendFileSync(path, " changed")
  }, 125)
}

describe("gulp.watch()", () => {
  beforeEach(() => fs.removeSync(outPath))
  beforeEach(() => fs.mkdirpSync(outPath))
  afterEach(() => fs.removeSync(outPath))

  it("should call the function when file changes: no options", done => {
    const tempFile = path.join(outPath, "watch-func.txt")

    createTempFile(tempFile)

    const watcher = gulp.watch("watch-func.txt", { cwd: outPath }, cb => {
      watcher.close()
      cb()
      done()
    })

    updateTempFile(tempFile)
  })

  it("should execute the gulp.parallel tasks", done => {
    const tempFile = path.join(outPath, "watch-func.txt")

    createTempFile(tempFile)

    gulp.task("test", cb => {
      watcher.close()
      cb()
      done()
    })

    const watcher = gulp.watch("watch-func.txt", { cwd: outPath }, gulp.parallel("test"))

    updateTempFile(tempFile)
  })

  it("should work with destructuring", done => {
    const tempFile = path.join(outPath, "watch-func.txt")
    const watch = gulp.watch
    const parallel = gulp.parallel
    const task = gulp.task
    createTempFile(tempFile)

    task("test", cb => {
      watcher.close()
      cb()
      done()
    })

    const watcher = watch("watch-func.txt", { cwd: outPath }, parallel("test"))

    updateTempFile(tempFile)
  })

  it("should not call the function when no file changes: no options", done => {
    const tempFile = path.join(outPath, "watch-func.txt")

    createTempFile(tempFile)

    const watcher = gulp.watch("watch-func.txt", { cwd: outPath }, () => {
      // TODO: proper fail here
      expect("Watcher erroneously called")
    })

    setTimeout(() => {
      watcher.close()
      done()
    }, 10)
  })

  it("should call the function when file changes: w/ options", done => {
    const tempFile = path.join(outPath, "watch-func-options.txt")

    createTempFile(tempFile)

    const watcher = gulp.watch("watch-func-options.txt", { cwd: outPath }, cb => {
      watcher.close()
      cb()
      done()
    })

    updateTempFile(tempFile)
  })

  it("should not drop options when no callback specified", done => {
    const tempFile = path.join(outPath, "watch-func-nodrop-options.txt")
    // By passing a cwd option, ensure options are not lost to gaze
    const relFile = "../watch-func-nodrop-options.txt"
    const cwd = path.join(outPath, "/subdir")

    createTempFile(tempFile)

    const watcher = gulp.watch(relFile, { cwd }).on("change", filepath => {
      expect(filepath).to.exist
      expect(path.resolve(cwd, filepath)).to.equal(path.resolve(tempFile))
      watcher.close()
      done()
    })

    updateTempFile(tempFile)
  })

  it("should work without options or callback", () => {
    // TODO: check we return watcher?
    gulp.watch("x").close()
  })

  it("should run many tasks: w/ options", done => {
    const tempFile = path.join(outPath, "watch-task-options.txt")
    let a = 0

    createTempFile(tempFile)

    gulp.task("task1", cb => {
      a++
      cb()
    })
    gulp.task("task2", cb => {
      a += 10
      expect(a).to.equal(11)
      watcher.close()
      cb()
      done()
    })

    const watcher = gulp.watch(
      "watch-task-options.txt",
      { cwd: outPath },
      gulp.series("task1", "task2")
    )

    updateTempFile(tempFile)
  })

  it("should run many tasks: no options", done => {
    const tempFile = path.join(outPath, "watch-many-tasks-no-options.txt")
    let a = 0

    createTempFile(tempFile)

    gulp.task("task1", cb => {
      a++
      cb()
    })
    gulp.task("task2", cb => {
      a += 10
      expect(a).to.equal(11)
      watcher.close()
      cb()
      done()
    })

    const watcher = gulp.watch(tempFile, gulp.series("task1", "task2"))

    updateTempFile(tempFile)
  })

  it("should throw an error: passed parameter (string) is not a function", done => {
    const filename = "empty.txt"
    const tempFile = path.join(outPath, filename)

    createTempFile(tempFile)
    try {
      gulp.watch(filename, { cwd: outPath }, "task1" as invalid)
    } catch (err) {
      expect(err.message).to.equal(
        `watching ${filename}: watch task has to be a function (optionally generated by using gulp.parallel or gulp.series)`
      )
      done()
    }
  })

  it("should throw an error: passed parameter (array) is not a function", done => {
    const filename = "empty.txt"
    const tempFile = path.join(outPath, filename)

    createTempFile(tempFile)
    try {
      gulp.watch(filename, { cwd: outPath }, ["task1"] as invalid)
    } catch (err) {
      expect(err.message).to.equal(
        `watching ${filename}: watch task has to be a function (optionally generated by using gulp.parallel or gulp.series)`
      )
      done()
    }
  })
})
