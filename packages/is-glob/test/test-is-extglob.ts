/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

import assert from "assert"
import { isExtGlob } from "../is-extglob"

describe("isExtglob", () => {
  it("should return true when the string has an extglob:", () => {
    assert(isExtGlob("?(abc)"))
    assert(isExtGlob("@(abc)"))
    assert(isExtGlob("!(abc)"))
    assert(isExtGlob("*(abc)"))
    assert(isExtGlob("+(abc)"))
    assert(isExtGlob("xyz/?(abc)/xyz"))
    assert(isExtGlob("xyz/@(abc)/xyz"))
    assert(isExtGlob("xyz/!(abc)/xyz"))
    assert(isExtGlob("xyz/*(abc)/xyz"))
    assert(isExtGlob("xyz/+(abc)/xyz"))
    assert(isExtGlob("?(abc|xyz)/xyz"))
    assert(isExtGlob("@(abc|xyz)"))
    assert(isExtGlob("!(abc|xyz)"))
    assert(isExtGlob("*(abc|xyz)"))
    assert(isExtGlob("+(abc|xyz)"))
  })

  it("should not match escaped extglobs", () => {
    assert(!isExtGlob("?(abc/xyz"))
    assert(!isExtGlob("@(abc"))
    assert(!isExtGlob("!(abc"))
    assert(!isExtGlob("*(abc"))
    assert(!isExtGlob("+(abc"))
    assert(!isExtGlob("(a|b"))
    assert(!isExtGlob("\\?(abc)"))
    assert(!isExtGlob("\\@(abc)"))
    assert(!isExtGlob("\\!(abc)"))
    assert(!isExtGlob("\\*(abc)"))
    assert(!isExtGlob("\\+(abc)"))
    assert(!isExtGlob("xyz/\\?(abc)/xyz"))
    assert(!isExtGlob("xyz/\\@(abc)/xyz"))
    assert(!isExtGlob("xyz/\\!(abc)/xyz"))
    assert(!isExtGlob("xyz/\\*(abc)/xyz"))
    assert(!isExtGlob("xyz/\\+(abc)/xyz"))
    assert(!isExtGlob("\\?(abc|xyz)/xyz"))
    assert(!isExtGlob("\\@(abc|xyz)"))
    assert(!isExtGlob("\\!(abc|xyz)"))
    assert(!isExtGlob("\\*(abc|xyz)"))
    assert(!isExtGlob("\\+(abc|xyz)"))
    assert(!isExtGlob("?\\(abc)"))
    assert(!isExtGlob("@\\(abc)"))
    assert(!isExtGlob("!\\(abc)"))
    assert(!isExtGlob("*\\(abc)"))
    assert(!isExtGlob("+\\(abc)"))
    assert(!isExtGlob("xyz/?\\(abc)/xyz"))
    assert(!isExtGlob("xyz/@\\(abc)/xyz"))
    assert(!isExtGlob("xyz/!\\(abc)/xyz"))
    assert(!isExtGlob("xyz/*\\(abc)/xyz"))
    assert(!isExtGlob("xyz/+\\(abc)/xyz"))
    assert(!isExtGlob("?\\(abc|xyz)/xyz"))
    assert(!isExtGlob("@\\(abc|xyz)"))
    assert(!isExtGlob("!\\(abc|xyz)"))
    assert(!isExtGlob("*\\(abc|xyz)"))
    assert(!isExtGlob("+\\(abc|xyz)"))
  })

  it("should detect when an extglob is in the same pattern as an escaped extglob", () => {
    assert(isExtGlob("\\?(abc)/?(abc)"))
    assert(isExtGlob("\\@(abc)/@(abc)"))
    assert(isExtGlob("\\!(abc)/!(abc)"))
    assert(isExtGlob("\\*(abc)/*(abc)"))
    assert(isExtGlob("\\+(abc)/+(abc)"))
    assert(isExtGlob("xyz/\\?(abc)/xyz/xyz/?(abc)/xyz"))
    assert(isExtGlob("xyz/\\@(abc)/xyz/xyz/@(abc)/xyz"))
    assert(isExtGlob("xyz/\\!(abc)/xyz/xyz/!(abc)/xyz"))
    assert(isExtGlob("xyz/\\*(abc)/xyz/xyz/*(abc)/xyz"))
    assert(isExtGlob("xyz/\\+(abc)/xyz/xyz/+(abc)/xyz"))
    assert(isExtGlob("\\?(abc|xyz)/xyz/?(abc|xyz)/xyz"))
    assert(isExtGlob("\\@(abc|xyz)/@(abc|xyz)"))
    assert(isExtGlob("\\!(abc|xyz)/!(abc|xyz)"))
    assert(isExtGlob("\\*(abc|xyz)/*(abc|xyz)"))
    assert(isExtGlob("\\+(abc|xyz)/+(abc|xyz)"))
  })

  it("should return false when the string does not have an extglob:", () => {
    assert(!(isExtGlob as any)())
    assert(!isExtGlob(null as any))
    assert(!isExtGlob(""))
    assert(!isExtGlob("? (abc)"))
    assert(!isExtGlob("@.(abc)"))
    assert(!isExtGlob("!&(abc)"))
    assert(!isExtGlob("*z(abc)"))
    assert(!isExtGlob("+~(abc)"))
    assert(!isExtGlob(["**/*.js"] as any))
    assert(!isExtGlob(["foo.js"] as any))
    assert(!isExtGlob("*.js"))
    assert(!isExtGlob("!*.js"))
    assert(!isExtGlob("!foo"))
    assert(!isExtGlob("!foo.js"))
    assert(!isExtGlob("**/abc.js"))
    assert(!isExtGlob("abc/*.js"))
    assert(!isExtGlob("abc/{a,b}.js"))
    assert(!isExtGlob("abc/{a..z}.js"))
    assert(!isExtGlob("abc/{a..z..2}.js"))
    assert(!isExtGlob("abc/(aaa|bbb).js"))
    assert(!isExtGlob("abc/?.js"))
    assert(!isExtGlob("?.js"))
    assert(!isExtGlob("[abc].js"))
    assert(!isExtGlob("[^abc].js"))
    assert(!isExtGlob("a/b/c/[a-z].js"))
    assert(!isExtGlob("[a-j]*[^c]b/c"))
    assert(!isExtGlob("."))
    assert(!isExtGlob("aa"))
    assert(!isExtGlob("abc.js"))
    assert(!isExtGlob("abc/def/ghi.js"))
  })
})
